# Docker Mastery: with Kubernetes +Swarm from a Docker Captain

## Quick Start
### What is Docker?
- example Dockerfile
```docker
FROM python #starts with python layer
RUN pip install flask #new layer, installing  flask
WORKDIR /app
COPY .. # copy resources from current catalog into it's own layer
CMD python app.py
# layers together form an image
# docker build reates an image with only an application and the things we need and nothing else
```
- Docker registry - universall app distribution
- Image has a unique SHA hash
- `docker push` pushes images with all it's layers to a registry
- `docker pull` pulls an image form a registry
- `docker run my-python-app` runs container - namespace isolates images
- [Kubernetes vs. Docker](https://www.bretfisher.com/kubernetes-vs-docker/)
- [About the Open Container Initiative](https://opencontainers.org/about/overview/)
- [Lecture on Github](https://github.com/BretFisher/udemy-docker-mastery/blob/main/intro/what-is-docker/what-is-docker.md)
### Quick container run
- [Play with Docker](https://labs.play-with-docker.com/)
- [Docker Hub](https://hub.docker.com/)
- [Docker Official Images](https://docs.docker.com/docker-hub/repos/manage/trusted-content/official-images/)
- [Apache httpd image](https://hub.docker.com/_/httpd)
- [Quick Container Run](https://github.com/BretFisher/udemy-docker-mastery/blob/main/intro/quick-container-run/quick-container-run.md)

#### Playing with Docker
- Open 'Play with Docker', login, add a sesion
```
$ docker version

$ docker run -d -p 8800:80 httpd

$ curl localhost:8800
```
### Why Docker?
- [A Brief History of Containers](https://www.aquasec.com/blog/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016/)
- [Why does Docker exist? (Github)](https://github.com/BretFisher/udemy-docker-mastery/blob/main/intro/why-docker/why-docker.md)

## Course Intro

- [Course Materials on Github](https://github.com/bretfisher/udemy-docker-mastery)
- ["Cloud Native DevOps" Discord](https://devops.fan/)
- [YouTube channel](https://www.youtube.com/channel/UC0NErq0RhP51iXx64ZmyVfg)
### Q&A
#### Bind for 0.0.0.0:80 failed: port is already allocated. -OR- port already in use -OR- permission denied.
This will happen if you are attempting to start a new container with a port that is already in-use on your machine. Remember in TCP/UDP, only one application/service can use a single IP+PORT at a time. This doesn’t change with containers when you use `-p`  to bind to the host IP+PORT.

**You'll need to either stop the app that's using that port, or just run your container on a different (available) port.**

First run `docker ps` to check if there are any containers using this port - if there are not; you likely have a non-Docker related application running on your machine that is using this port. Maybe IIS, maybe Apache, etc.

If you are on a Mac, you can check what is using the port with the command: `lsof -i :<port>`  

If you are on Windows, you can check what is using which port with: `netstat`  

Of course - if you don’t have a reason to specifically use the port that is throwing this error, simply run your container on another port. Remember, the syntax is `<host port>:<container port>`  , so binding to port 8888 on your host machine with a container that uses port 80, would look like: `docker container run -p 8888:80 your_image`  

#### What happened to Docker Toolbox?
It was deprecated by Docker in lieu of Docker Desktop, which now works on all editions of Windows 10/11, macOS, and Linux Desktop.  If you want a multi-node setup locally, then Multipass is a good replacement for Toolbox.

#### $(pwd) in Windows is getting an error for bind-mounts: C:\Program Files\Docker Toolbox\docker.exe: invalid reference format.
First, you should no longer be using CMD.exe (Command Prompt) or PowerShell for Docker commands, because it tends to be a lot easier to just run them from a WSL Linux (bash/zsh) command where `$(pwd)` will work. But, if you'd like more info on the "why", read on.

PowerShell has a few minor differences in command format. This is a PowerShell thing, not a docker thing. When using the shell path shortcut "pwd":

For PowerShell use: `${pwd}`

For cmd.exe "Command Prompt use: `%cd%`

bash, sh, zsh, and Docker Toolbox Quickstart Terminal use: `$(pwd)` 

Note, if you have spaces in your path, you'll usually need to quote the whole path in the docker command.

There's another issue sometimes seen, where other apps can mess up your path: https://stackoverflow.com/questions/50608301/docker-mounted-volume-adds-c-to-end-of-windows-path-when-translating-from-linux

#### I hit Ctrl-C in Windows, and the Container is still running

I recommend you use WSL Linux with bash or zsh to avoid this quirky inconsistency. If you'd like to know more, read on:

In Windows, there's a quirk with the built-in Powershell and Command Prompt terminals. They don't interpret ctrl-c the same way as Linux, Unix, and macOS. They won't shutdown the container, and you'll need to use `docker stop` commands.

#### How do I cleanup space (images etc.)?
Run prune commands https://www.udemy.com/docker-mastery/learn/v4/t/lecture/7407918?start=0

#### Bind Mount Won't Show Up In Container

This is usually a Docker for Windows issue, where you need to go into Docker Settings GUI (lower right icon) and uncheck the drive where your code is, then save, and then re-check that drive to re-apply the file sharing permissions between the Linux VM and the Windows OS.

#### Starting container process caused "exec: \"ping\": executable file not found in $PATH": unknown

That error is telling you that ping is not available in the image you’re trying to run it from. Official images have changed over time and the official nginx default image (nginx:latest) no longer has ping in it by default.  Image nginx:alpine should still have ping installed (a few of my videos show utilities like ping that are no longer in those images).

If it's a debian-based image (the default nginx) then you can also use `apt-get update && apt-get install -y iputils-ping`   inside the container to install it.

Lastly, I keep a “bunch of troubleshooting and handy admin utilities” in an image here that you can run ping from: `bretfisher/netshoot`
https://www.udemy.com/docker-mastery/learn/v4/questions/3751216  

#### Starting mysql container and running ps causes "ps: command not found"

Like above, this is the container shell telling you the binary "ps" isn't in your path, and not installed in the container. Docker changed the mysql image after the video was recorded and removed the ps utility. You can add it back in using the apt package manager.

`apt-get update && apt-get install procps`

For more info: https://stackoverflow.com/questions/26982274/ps-command-doesnt-work-in-docker-container

#### How to run two container websites on a single port in Docker or Swarm services
This is a bit more advanced, but common for production Swarms. You'll need a "reverse proxy"

https://www.udemy.com/docker-mastery/learn/v4/questions/3931678
#### Error response from daemon: pull access denied.

Double and triple-check the spelling of the image you are pulling; if you are attempting to pull a publicly hosted image - this error will not occur, but if there is a typo and Docker can’t find the image - it will expect that it is a private image and ask you to login.

Also, there are times when the config.json file gets messed up, so try docker logout && docker login. If all that still causes the same issue, try removing `~/.docker/config.json`  and then pull again.

#### Kubernetes vs. Swarm.
I have a dedicated lecture for this: 

https://www.udemy.com/course/docker-mastery/learn/lecture/15094976

#### Does this help with Docker Certified Associate?
Yes, but it’s not a study guide. Here’s the Lecture with info: https://www.udemy.com/docker-mastery/learn/v4/t/lecture/9485678?start=0

#### Ubuntu Container vs. Ubuntu OS, What's the Difference?
https://www.udemy.com/docker-mastery/learn/v4/questions/5390204

#### How to use volumes in Swarm for databases.
https://www.udemy.com/docker-mastery/learn/v4/questions/2675184

#### How do we do backups in docker?
https://www.udemy.com/docker-mastery/learn/v4/questions/2756448

#### Getting a shell in VM’s that run Docker
Workaround: https://www.udemy.com/docker-mastery/learn/v4/questions/3860412

`docker run -it --rm --privileged --pid=host justincormack/nsenter1`

macOS https://www.bretfisher.com/docker-for-mac-commands-for-getting-into-local-docker-vm/

Docker for Windows https://www.bretfisher.com/getting-a-shell-in-the-docker-for-windows-vm/

Docker Toolbox `docker-machine ssh default`

#### Windows firewalls preventing networking or bind mounts in containers
https://www.udemy.com/docker-mastery/learn/v4/questions/3258290

#### Anti-Virus Blocking file sharing in Windows
https://www.udemy.com/docker-mastery/learn/v4/questions/3442460

#### Are containers more secure than VM’s?
https://www.udemy.com/docker-mastery/learn/v4/questions/4020880

#### I have a network proxy and images won’t build
https://stackoverflow.com/questions/23111631/cannot-download-docker-images-behind-a-proxy/

#### Public vs. Private IP for Swarm advertise-addr and data-path-addr
https://www.udemy.com/docker-mastery/learn/v4/questions/3710518

#### Custom Docker Networks, macvlan and IP setting hardcoding
https://www.udemy.com/docker-mastery/learn/v4/questions/3706540

## Setting up Docker
### Installing the right Docker
- [Open Container Initiative](https://opencontainers.org/)
- [Docker Desktop](https://docs.docker.com/desktop/)
- [Local container runtimes in 2024, tools for running containers for local dev
](https://docs.google.com/spreadsheets/d/1ZT8m4gpvh6xhHYIi4Ui19uHcMpymwFXpTAvd3EcgSm4/edit?gid=0#gid=0)

- 3 major ways to run containers
  - Locally(Docker Desktop, RD)
  - Servers(Docekr Engine, K8s)
  - Paas(Cloud Run, Fargate)
  
### Instaling Docker The Fast way
#### Installing on Windows 10 and Windows 11 (any Edition)
- https://docs.docker.com/desktop/windows/install/

- This is the best experience on Windows, which uses WSL2. If you're new to WSL2, it's the best way to run Linux on Windows, and Docker Desktop will walk you through enabling it. Docker can technically still work on Hyper-V with "Windows Containers," but most of this course focuses on Linux Containers, which WSL2 is great at.

- After installing Docker Desktop for Windows. It is recommended installing a Windows Store Ubuntu for WSL2 distro and using its shell in Windows Terminal is the best CLI experience! Make sure to check your Docker Desktop settings to give it enough resources and enable all your WSL2 distros for Docker Desktop.

#### Installing on Windows 7 or Windows 8
- Docker Desktop don't work in these older versions. You'll need to use Hyper-V or install VirtualBox and manually setup a Linux VM.

#### Installing on Linux Desktop

- https://docs.docker.com/desktop/linux/install/
- Installing on Linux Server https://docs.docker.com/engine/install/

- Do *not* use your built-in default packages  apt/yum install docker.io because those packages are old and not the Official Docker-Built packages. 

- Prefer to use Docker's automated script to add their repository and install all dependencies: curl -sSL https://get.docker.com/ | sh  but you can also install in a more manual method by following specific instructions that Docker provides for your Linux distribution.

#### Use Play With Docker
- https://labs.play-with-docker.com/

- When you don't have local admin, or maybe your machine doesn't have enough resources. The best free option here is to use play-with-docker.com, which will run one or more Docker instances inside your browser, and give you a terminal to use it with. You can create multiple machines on it and even use the URL to share the session with others in a sort of collaborative experience.
### Docker for Windows: Setup and Tips
- [Install Docker Desktop on Windows](https://docs.docker.com/desktop/setup/install/windows-install/)
  - Use WSL2 instead of Hyper-V
  - Add shortcut to desktop
  - Docker desktop / Configuration / Resources / WSL Integration - check **Enable integration with my default WSL distro**
  - Go to Windows Store and download Ubuntu for WSL
  - [Course GitHub Repo](https://github.com/BretFisher/udemy-docker-mastery)
  
### Docker for Linux Desktop: Setup and Tips
- [Install Docker Desktop on Linux](https://docs.docker.com/desktop/setup/install/linux/)
- [Course GitHub Repo](https://github.com/BretFisher/udemy-docker-mastery)
- Tips
  - point **Resources File Sharing** to `/home`.
  
### Docker for Linux Server: Setup and Tips
- [Install Docker Engine on Linux](https://docs.docker.com/engine/install/)
- Tips:
  - for installing you can also use a script.
```
curl -fsSL https:// get.docker.com -o get-docker.sh
sh get-docker.sh
```
  - command line `apt install docker-ce-cli`
  - connecting docker servers from a commandline: 
    - set DOCKER_HOST `export DOCKER_HOST=ssh://root@143.244.158.151`
    
### VS Code for DevOps, Docker and YAML Editing
- [Docker Extension Pack for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker)
- [Visual Studio Code Kubernetes Tools]()